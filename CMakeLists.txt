cmake_minimum_required(VERSION 2.8)
project(HideMyBenis)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
CMAKE_POLICY(SET CMP0020 NEW)

find_package(Sodium REQUIRED)
find_package(Qt5Widgets)
find_package(Qt5Core)
include_directories(${SODIUM_INCLUDE_DIR})
include_directories(${STB_INCLUDE_DIR})

if(Qt5Widgets_FOUND AND Qt5Core_FOUND)
	set(LIBS ${LIBS} ${SODIUM_LIBRARY_DIR} Qt5::Widgets Qt5::Core)
	set(SOURCE_FILES_GUI gui.cpp benis_crypt.h benis_crypt.cpp image.h image.cpp benisgui.h benisgui.cpp benisgui.ui)
	add_executable(HideMyBenis_GUI WIN32 ${SOURCE_FILES_GUI})
	target_link_libraries(HideMyBenis_GUI ${LIBS})
endif()
set(SOURCE_FILES main.cpp argparser.h argparser.cpp benis_crypt.h benis_crypt.cpp image.h image.cpp)
add_executable(HideMyBenis ${SOURCE_FILES})
target_link_libraries(HideMyBenis ${SODIUM_LIBRARY_DIR})
